<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CMD常用指令</title>
    <link href="/2022/07/22/CMD%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/07/22/CMD%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>水一篇CMD常用指令</p><hr><ol><li><p>盘符名称+冒号</p><p>例：<code>G:</code></p><p>作用：切换到某个盘</p></li><li><p><code>dir</code></p><p>作用：显示当前路径下的所有文件和文件夹，<strong>包括隐藏文件！</strong></p></li><li><p><code>cd 目录</code></p><p>作用：进入一个单级目录</p><p><strong>tips：</strong>不一定完整输入目录名称，输入开头之后可以按<code>Tab</code>键自动补全</p></li><li><p><code>cd ..</code></p><p>作用：返回上一级目录</p></li><li><p><code>cd 目录1\目录2</code></p><p>例：<code>cd MyBlog\source\_posts</code></p><p>作用：进入多级目录</p></li><li><p><code>cd \</code></p><p>作用：回到盘根目录</p></li><li><p><code>cls</code></p><p>作用：清屏</p></li><li><p><code>exit</code>‘</p><p>作用：退出关闭CMD</p></li></ol><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>如果想要在任意目录下都可以打开指定的软件，就可以把软件的路径配置到环境变量中。</p><p>如何配置环境变量：</p><p>打开电脑设置-选择高级系统设置-高级-环境变量-Path-编辑-添加</p><p>比如要随时随地打开QQ：</p><p>QQ是通过QQ.exe程序打开的</p><p>而QQ.exe在这个路径下</p><p><code>C:\Program Files (x86)\Tencent\QQ\Bin</code></p><p>那么只要将这个路径添加到<strong>环境变量</strong>中，就可以在cmd中的任何路径输入QQ.exe打开QQ了</p><hr><p>安装了Java之后，会自动在系统环境变量中配置好环境，但是仅仅只包含了4个工具：<code>java.exe</code>，<code>javac.exe</code>，<code>javaw.exe</code>和<code>jshell.exe</code></p><p>对此我们可以自己配置安装JDK时bin目录下的所有工具。在这个目录下<code>S:\Java\JDK-17.0.4\bin</code></p><p>可以在<strong>系统变量</strong>中新建一个变量<code>JAVA_HOME</code>，值为<code>S:\Java\JDK-17.0.4</code>，然后在<code>Path</code>中新建<code>%JAVA_HOME%\bin</code>，即可配置好自己的Java环境。</p><p>其中<code>%JAVA_HOME%</code>表示的是对<code>JAVA_HOME</code>这个变量的引用。</p><p><strong>tips：</strong>win10系统可能有bug，重启后配置的环境变量失效，这时就不要再用引用了，直接写完整路径即可。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cpp_复习整理_2_模板、重载、输入输出流</title>
    <link href="/2022/07/16/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-2/"/>
    <url>/2022/07/16/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-2/</url>
    
    <content type="html"><![CDATA[<h1 id="书接上回"><a href="#书接上回" class="headerlink" title="书接上回"></a>书接上回</h1><p>本篇将会总结一下<strong>C++中的模板</strong>以及<strong>重载</strong>两大模块，以及<strong>输入输出流</strong>。</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><h3 id="为什么要定义模板？"><a href="#为什么要定义模板？" class="headerlink" title="为什么要定义模板？"></a>为什么要定义模板？</h3><p>众嗦粥汁，<code>C++</code>是一种<strong>强类型语言</strong>，对于变量的类型必须要<strong>显式指出</strong>。那么就会存在<strong>不灵活</strong>的问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//举个例子，求一个数绝对值的函数，而数值的类型可以有int，float，double等，那么就需要定义不同的函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Abs</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br><span class="hljs-keyword">return</span> a&gt;<span class="hljs-number">0</span>?a:-a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Abs</span><span class="hljs-params">(<span class="hljs-type">float</span> a)</span></span>&#123;<br><span class="hljs-keyword">return</span> a&gt;<span class="hljs-number">0</span>?a:-a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Abs</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span></span>&#123;<br><span class="hljs-keyword">return</span> a&gt;<span class="hljs-number">0</span>?a:-a;<br>&#125;<br></code></pre></td></tr></table></figure><p>不难发现，上面这三个函数，除了<code>函数类型</code>和<code>参数类型</code>，其余部分完全一样，但是却需要三段几乎相同的函数代码。</p><p>所以为了<strong>节省代码量</strong>，更为了<strong>提高代码的适用性</strong>，<code>C++</code>提供了<code>模板template</code>功能。我们可以定义如下的模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-comment">//或者templata&lt;class T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">Abs</span><span class="hljs-params">(T a)</span></span>&#123;<br><span class="hljs-keyword">return</span> a&gt;<span class="hljs-number">0</span>?a:-a;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数模板的声明通过关键字<code>template</code>开始，该关键字之后是使用尖括号<code>&lt; &gt;</code>括起来的<code>类参/形参表</code>。</p><ul><li><strong>每个</strong>类型参数之前有<code>typename</code>或者<code>class</code>。</li><li><strong>至少存在一个</strong>类参。</li><li>类参可以代表的是<code>内部类型</code>，也可以是用户自定义的<code>结构体</code>类型或者<code>类</code>类型。</li></ul><p>这样在函数调用中，模板就能根据所给的实参类型（如<code>int</code>），进行实例化（如得到<code>int Abs(int a)</code>）。完成对应的操作。</p><h3 id="关键字class和typename的区别"><a href="#关键字class和typename的区别" class="headerlink" title="*关键字class和typename的区别"></a>*关键字<code>class</code>和<code>typename</code>的区别</h3><p>上一篇我们总结了<code>C++</code>中<strong>类</strong>的使用，我们清楚<code>class</code>作用是定义一个类。</p><p>而在引入了<strong>模板</strong>之后，<code>class</code>作为表示<code>类型参数</code>的标识符，作为模板声明最初的形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;......<br></code></pre></td></tr></table></figure><p>但是后来人们发现<code>class</code>在某些情形下会导致<strong>二义性错误</strong>。引入了<code>typename</code>这个关键字，所以模板声明也可以是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;......<br></code></pre></td></tr></table></figure><p>至此，<strong>在模板定义的语法中</strong>，<code>class</code>和<code>typename</code>的作用<strong>完全一样</strong>。</p><p>但是，<code>typename</code>不仅仅在模板定义中起作用，<code>typename</code>的另外一个作用为：<strong>使用嵌套依赖类型</strong>。下方举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">obj</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> myType;<br>......<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(T myObj)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> T::myType myNewType;<span class="hljs-comment">//重点在这里</span><br>    myNewType ans = myObj.data;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>typename</code>就是在告诉<code>C++编译器</code>，在其后方是一个<strong>类型的名称</strong>，而不是<code>T类型</code>（此例子中假定为<code>obj类</code>）中的一个<strong>静态成员</strong>。如果没有<code>typename</code>，编译器就无法得知<code>T::myType</code>的确切含义，存在<strong>二义性错误</strong>，编译就不会通过。</p><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//举例</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>,<span class="hljs-type">int</span> nMax&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CType</span>&#123;<br><span class="hljs-keyword">public</span>:<br>T1 m_t1Data;<br>    T2 m_t2Data[nMax];<br>  <span class="hljs-built_in">CType</span>();<br>    ~<span class="hljs-built_in">CType</span>();<br>    <span class="hljs-function">T1 <span class="hljs-title">fun</span><span class="hljs-params">(T1 v1)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这是一个简单的<strong>类模板</strong>，具有两个类参以及一个形参。形参不一定要在类参的后方。</p><p>有了模板还要对它进行<strong>实例化</strong>来使用。诸如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">CType&lt;<span class="hljs-type">int</span>,<span class="hljs-type">double</span>,<span class="hljs-number">50</span>&gt; myObj;<br></code></pre></td></tr></table></figure><p>这样<code>CType</code>类中的<code>m_t1Data</code>和<code>m_t2Data[nMax]</code>就被分别实例化成了<code>int</code>型和<code>double</code>型数组。并且<code>nMax</code>的值为<code>50</code>。</p><p>类模板中还存在一个函数声明<code>fun</code>，那么有了声明，肯定还要有定义，模板里的函数要怎么定义呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>,<span class="hljs-type">int</span> nMax&gt;<br>T1 CType&lt;T1,T2,nMax&gt;::<span class="hljs-built_in">fun</span>(T1 v1)&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>++类模板的成员函数起始于<code>template</code>，结束于函数体的右花括号<code>&#125;</code>。</p></li><li><p><code>CType&lt;T1,T2,nMax&gt;::</code>是类模板的<strong>“变通的类域分辨符”</strong>。</p><p>且<strong>变通的类域分辨符</strong>的尖括号中，<strong>类参</strong>需要去掉<code>class/typename</code>，而<strong>形参</strong>需要去掉<code>int</code>之类的类型。<strong>次序</strong>和<strong>个数</strong>要对应不变。</p><p>当模板被实例化，<code>T1，T2，nMax</code>明确之时就是这个<strong>“变通的类域分辨符”</strong>固定之时。</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>由于类模板只有在实例化的时候才被确定，所以有些明显的概念错误可能逃过编译器的检查。因此在建立类模板的时候，最好事先进行特定类的具体编程，然后再选择若干类名作为类型参量，进行“特定类”到“通用类”的升级处理，即<strong>反向设计通用类</strong>。</p><h1 id="重载机制"><a href="#重载机制" class="headerlink" title="重载机制"></a>重载机制</h1><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><p>程序中总有时候，同一个符号或者名字在不同的情况下具有不同的解释，这就是<strong>多态性</strong><code>polymorphism</code>。</p><p>而在面向对象的程序设计语言中，由程序员设计的多态性有两种最基本的形式：1）<strong>编译时多态性</strong>；2）<strong>运行时多态性</strong></p><ul><li><strong>编译时多态性</strong>：在程序编译时便可确定下来的多态性，通过<strong>重载机制</strong>获得，包括<code>函数重载</code>和<code>运算符重载</code>。</li><li><strong>运行时多态性</strong>：必须等到程序动态运行时才可以确定的多态性，主要通过<code>继承</code>+<code>动态绑定</code>获得。</li></ul><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul><li><code>C++</code>语言中，只要在声明函数原型时<strong>形参的个数</strong>或者<strong>对应位置形参的类型不同</strong>，那么两个或更多的函数就可以共用一个名字，在同一作用域中允许多个函数共用一个函数名。</li><li><code>C</code>语言中，不支持<strong>重载</strong>，所以每个函数必须具有<strong>唯一的名字</strong>。<ul><li><code>C</code>语言中有三个求绝对值的函数：<code>abs()</code>，<code>labs()</code>，<code>fabs()</code>，分别用于处理<code>int</code>，<code>long</code>和<code>double</code>的绝对值。</li></ul></li></ul><hr><h4 id="函数重载的错误情形"><a href="#函数重载的错误情形" class="headerlink" title="函数重载的错误情形"></a>函数重载的错误情形</h4><p>编译程序根据<strong>实际参数个数以及它们对应的类型</strong>，选择调用哪个重载函数，因此重载函数<strong>必须在形参个数以及类型上区分</strong>。</p><ul><li><p><code>函数类型</code><strong>无法区分</strong>重载函数！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_value</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>;<span class="hljs-comment">//get_value(3);</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_value</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>;<span class="hljs-comment">//程序无法确定调用哪个函数。</span><br></code></pre></td></tr></table></figure></li><li><p>给类型用<code>typedef</code>取别名，<strong>无法区分</strong>重载函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> MONEY;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-type">double</span> income)</span></span>;<br><span class="hljs-function">MONEY <span class="hljs-title">calculate</span><span class="hljs-params">(MONEY income)</span></span>;<span class="hljs-comment">//MONEY和double在编译器眼中是完全一样的</span><br></code></pre></td></tr></table></figure></li><li><p><strong>引用</strong><code>&amp;</code>不能作为重载函数的判定依据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; value)</span></span>;<span class="hljs-comment">//出现二义性</span><br></code></pre></td></tr></table></figure></li><li><p>函数的<strong>缺省参数</strong>，可以理解为函数重载的一种简化形式。如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b=<span class="hljs-number">2</span>,<span class="hljs-type">int</span> c=<span class="hljs-number">3</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><strong>注意：缺省参数的右边必须 全是 或 没有 参数！即所有缺省参数都得在形参列表的右部。</strong></li></ul><p>可对应三种不同的调用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span>;<span class="hljs-comment">//fun(10,11,12);</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<span class="hljs-comment">//fun(10,11);等价于fun(10,11,3);</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<span class="hljs-comment">//fun(10);等价于fun(10,2,3);</span><br></code></pre></td></tr></table></figure><p>但是缺省参数也可能导致<strong>二义性</strong>。如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j=<span class="hljs-number">10</span>)</span></span>;<br><br><span class="hljs-built_in">fun</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//正常调用fun(int,int)</span><br><span class="hljs-built_in">fun</span>(<span class="hljs-number">5</span>);<span class="hljs-comment">//ERROR，无法确定调用哪个</span><br></code></pre></td></tr></table></figure><p>对于<code>fun(5)</code>，编译器可以认为调用了单参的<code>fun(5)</code>，也可以认为调用了带缺省参数的<code>fun(5,10)</code>，因而出现了二义性错误。</p><p>所以：如果重载函数的参数设置有默认值，则必须<strong>保证使用参数默认值后的调用形式与该函数的其它重载形式不相同</strong>。</p><hr></li><li><p>若想为<strong>相同的函数原型</strong>提供不同的实现方案，则<strong>无法通过函数重载</strong>完成。</p></li></ul><h4 id="函数重载的注意点"><a href="#函数重载的注意点" class="headerlink" title="函数重载的注意点"></a>函数重载的注意点</h4><ul><li><p><strong>二义性</strong>：是致命的，使得编译程序无法生成目标代码。造成二义性的主要原因：<code>1)</code><strong>隐式类型转换</strong>；<code>2)</code><strong>缺省参数</strong>。</p><ul><li><p>编译程序选择重载函数的<strong>规则</strong>：绑定次序是</p><ul><li><strong>最优</strong>：精确匹配</li><li><strong>次优</strong>：对实参的类型向<strong>高类型</strong>转换后的匹配（<strong>不丢失精度</strong>）</li><li><strong>最次</strong>：对实参的类型向<strong>低类型及相容类型</strong>转换后的匹配（可以运行，但是会报<code>Warning</code>）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> -&gt; <span class="hljs-type">long</span> -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> -&gt; <span class="hljs-type">float</span> -&gt; <span class="hljs-type">double</span> -&gt; <span class="hljs-type">long</span> <span class="hljs-type">double</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>函数重载不可滥用</strong>，不适当的重载会降低程序的可读性，只有当函数实现的语义非常相近时才会使用重载。</p></li><li><p>类定义中也可以使用函数重载，如<strong>构造函数</strong>，<strong>赋值运算符</strong>的重载等。</p></li></ul><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p><strong>运算符</strong>，如果一些情况下可以直接代替函数名，并用运算符的书写形式调用函数。那么这种形式将更容易理解。</p><p>例如，在基本数据类型中<code>+</code>表示<strong>整数或浮点数的加法</strong>。如果用户设定了自定义类型诸如复数，矩阵等，为了使相应的加法运算也能进行，就需要用到<strong>运算符重载</strong>。</p><p><code>C++</code>允许运算符的语义由程序员重新定义，实质上<strong>运算符重载</strong>就是<strong>函数重载</strong>。分为两种形式：<code>1)</code><strong>类成员函数</strong>；<code>2)</code><strong>普通函数</strong>。</p><h4 id="类内重载"><a href="#类内重载" class="headerlink" title="类内重载"></a>类内重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">函数类型 类名::<span class="hljs-keyword">operator</span> 运算符符号(参数表)&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>参数表中的参数，受到所重载的运算符约束，<strong>数量不可随意指定</strong>。</p><p>类内重载的话，参数列表中的参数个数要比要求个数少一，类内调用的函数因为<strong>默认访问</strong>的存在，已经隐式具备了一个<code>*this</code>的实参；因此对于二元运算符，只需要<strong>显式传递一个右操作数</strong>。</p></li></ul><h5 id="使用类内重载的运算符"><a href="#使用类内重载的运算符" class="headerlink" title="使用类内重载的运算符"></a>使用类内重载的运算符</h5><p>本质上是由<strong>左操作数</strong>调用类内的运算符函数，因此，<strong>左操作数必须是该类的对象</strong>，即保证“左操作数”类型正确。</p><h4 id="类外重载"><a href="#类外重载" class="headerlink" title="类外重载"></a>类外重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">函数类型 <span class="hljs-keyword">operator</span> 运算符符号(参数表)&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><p>不与对象联合使用，则无默认的<code>this</code>指针，因此，必须<strong>显式</strong>传递与运算符<strong>要求的运算数个数相同</strong>的参数。</p></li><li><p>对于类的数据封装性，很多时候数据是<strong>不对外部函数开放</strong>的，因此有两种解决方法：</p><p>1）开放数据为<code>public</code>。</p><p>2）(<strong>更好的选择</strong>)将函数声明为类的友元，如在类定义中加入如下类似的声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">friend</span> obj <span class="hljs-keyword">operator</span>+(obj left,obj right);<br></code></pre></td></tr></table></figure></li></ol><h3 id="运算符重载的规则"><a href="#运算符重载的规则" class="headerlink" title="运算符重载的规则"></a>运算符重载的规则</h3><ol><li><p>绝大部分的运算符可以重载，只有下列运算符<strong>不能重载</strong>，它们是：</p><p>1）<code>.</code> 成员访问运算符</p><p>2）<code>.*</code>、<code>-&gt;*</code> 成员指针访问运算符</p><p>3）<code>::</code> 域运算符</p><p>4）<code>sizeof</code> 长度运算符</p><p>5）<code>?:</code> 条件运算符</p><p>6）<code>#</code> 预处理符号</p></li><li><p>在可重载的运算符中<code>=</code> (赋值运算符)，<code>[]</code> (下标运算符)，<code>()</code> (函数调用运算符)，<code>-&gt;</code> (通过指针访问类成员的运算符)<strong>必须定义为类的成员函数</strong>，不能定义为友元或普通函数。</p><p>而<code>&lt;&lt;</code> (流输出)，<code>&gt;&gt;</code> (流输入)则必须定义到类外，不能定义为类的成员函数。（因为这两个运算符的主调对象都是<strong>io</strong>对象）</p></li><li><p><strong>不能创建新的运算符</strong>，只能对已有的运算符进行重载。</p></li><li><p>重载不能改变运算符的<strong>操作数个数</strong>。</p></li><li><p>重载不能改变运算符的<strong>优先级别</strong>与<strong>结合性</strong>。</p></li><li><p>重载的运算符函数的参数列表中<strong>不能有默认参数</strong>，否则就改变了参数的个数，这与<code>4.</code>矛盾。</p></li><li><p>重载运算符必须和<strong>类类型</strong>或者<strong>枚举类型</strong>一起使用，其参数至少有一个是<strong>类对象</strong>（或类对象的引用）。</p><ul><li><p>即参数不能全是C++的标准类型，防止用户修改用于标准类型数据的运算符的性质。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> <span class="hljs-keyword">operator</span> +(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> b)&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/07/16/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-2/1.png" class=""></li></ul></li><li><p>用于类对象的运算符<strong>一般必须</strong>重载，但<code>=</code>(赋值运算符) 和 <code>&amp;</code>(地址运算符) 不必用户重载。</p></li><li><p>习惯上建议将重载运算符的功能与逻辑，类似于该运算符作用于标准类型数据时所实现的功能。</p></li><li><p>运算符重载函数可以是类的成员函数，也可以是类的友元函数，还可以是既非类的成员函数也不是友元函数的普通函数。</p></li></ol><h2 id="前置-与后置-的重载"><a href="#前置-与后置-的重载" class="headerlink" title="前置++与后置++的重载"></a>前置++与后置++的重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//引例</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br>    (a++)++;<span class="hljs-comment">//ERROR C2105:&quot;++&quot;需要左值</span><br>    ++(a++);<span class="hljs-comment">//ERROR C2105:&quot;++&quot;需要左值</span><br>    a++ = <span class="hljs-number">1</span>;<span class="hljs-comment">//ERROR C2106:&quot;=&quot;左操作数必须为左值</span><br>    (++a)++;<span class="hljs-comment">//OK</span><br>    ++(++a);<span class="hljs-comment">//OK</span><br>    ++a = <span class="hljs-number">1</span>;<span class="hljs-comment">//OK</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么会出现这样的情况呢？</p><p>我们知道<code>前置++</code>和<code>后置++</code>虽然最终结果都是使对象加一，但是实际的作用过程并不相同。</p><p><code>前置++</code><strong>将对象的本身作为左值返回，而</strong><code>后置++</code><strong>将对象运算前的副本作为右值返回。</strong></p><h3 id="左值与右值"><a href="#左值与右值" class="headerlink" title="左值与右值"></a>左值与右值</h3><p><strong>左值</strong><code>lvalue</code>：指那些求值结果为对象或函数的表达式。一个表示对象的<strong>非常量</strong>左值可以作为<strong>赋值运算符的左侧运算对象</strong>。</p><p><strong>右值</strong><code>rvalue</code>：是指一种表达+式，其结果是值<strong>而非所在的位置</strong>。</p><p>那么问题就解决了，上方代码段中，出现<code>ERROR</code>的代码都是在进行了<code>a++</code>之后，对结果进行了其它要求左值的运算，而<code>a++</code>返回的是一个右值，所以报错“<code>需要左值</code>”。</p><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Age</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">public</span>:<br>    Age&amp; <span class="hljs-keyword">operator</span>++()<span class="hljs-comment">//前置++</span><br>    &#123;<br>        ++i;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-type">const</span> Age <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>)<span class="hljs-comment">//后置++</span><br>    &#123;<br>        Age tmp = *<span class="hljs-keyword">this</span>;<br>        ++(*<span class="hljs-keyword">this</span>);<span class="hljs-comment">//使用的就是重载过的前置++，目的是避免自增代码的重复</span><br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br>    Age&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">int</span> i)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;i=i;<span class="hljs-comment">//Age类中的数据成员i与形参i同名，所以需要显式的写出this指针。</span><br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li><p>可以看出前置++和后置++的<strong>返回值类型不同</strong>。</p><p>前置++的返回类型是<code>Age&amp;</code>，后置++的返回类型为<code>const Age</code>。</p><p>这意味着，前置++返回的是<strong>左值</strong>，后置++返回的是<strong>右值</strong>。</p><p><code>a++</code>的类型是<code>const Age</code>，自然不能进行前置++、后置++、赋值等操作；而<code>++a</code>的类型是<code>Age&amp;</code>，可以进行这些操作。</p><ul><li>问题1：<code>a++</code>的返回类型为什么要是<code>const</code>对象呢？<ul><li>如果不是<code>const</code>对象，那么<code>(a++)++</code>就可以通过编译，但是运行结果却<strong>违背了直觉</strong>。虽然看似进行了两次自增，但是<code>a</code>实际上只增加了1，因为第二次自增作用在<strong>第一次自增执行中产生的一个对象</strong>。</li><li>自定义类型的操作符重载，<strong>应该与内置类型保持行为一致</strong>。</li></ul></li><li>问题2：<code>++a</code>的返回类型为什么是引用呢？<ul><li>与内置行为保持一致，为了能和其它运算符组合计算。</li></ul></li></ul></li><li><p>还能看出<strong>形参不同</strong>。</p><p><strong>前置++</strong> 没有形参，而<strong>后置++</strong> 有一个<code>int</code>形参。但是形参并没有被用到，这个形参只是为了<strong>绕过语法的限制</strong>。</p><p>因为没有这个<code>int</code>形参，前置和后置的重载<strong>便无法区分（函数类型不能作为重载的区分）</strong>。</p></li><li><p>实现<strong>代码</strong>不同。</p><p><strong>前置</strong>只是简单的完成增加操作之后<strong>返回对象的引用</strong>即可。</p><p><strong>后置</strong>则需要先设置一个对象的拷贝，再进行自增，最后返回的是<strong>拷贝</strong>。</p></li><li><p><strong>效率不同</strong>。</p><p>后置自增会<strong>产生一个临时对象</strong>，会造成一次构造函数和析构函数的额外开销，显然<strong>后置效率低于前置</strong>。</p><ul><li>因此：<strong>除非必须，均建议使用前置自增</strong>。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;++i)<span class="hljs-comment">//使用++i而不是i++</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="自减类同自增。"><a href="#自减类同自增。" class="headerlink" title="自减类同自增。"></a>自减类同自增。</h2><h2 id="类型转换运算符的重载"><a href="#类型转换运算符的重载" class="headerlink" title="类型转换运算符的重载"></a>类型转换运算符的重载</h2><p><code>C++</code>支持类型的转换，在内部类型中，支持按照类似的写法进行强制类型转换：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> myNum=<span class="hljs-number">5</span>;<br><span class="hljs-type">double</span> myDouble = (<span class="hljs-type">double</span>)myNum;<br></code></pre></td></tr></table></figure><p>有时，我们也需要将<strong>类类型</strong>转换成<strong>内部类型</strong>或者转换成另一个<strong>类类型</strong>。</p><p>那么，我们就需要<strong>重载类型转换运算符</strong>。</p><h3 id="转换成内部类型"><a href="#转换成内部类型" class="headerlink" title="转换成内部类型"></a>转换成内部类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//例如：</span><br><span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">double</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>    <span class="hljs-keyword">return</span> ...;<span class="hljs-comment">//return的是double类型，即要转换的类型</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="转换成类类型"><a href="#转换成类类型" class="headerlink" title="转换成类类型"></a>转换成类类型</h3><p>在上一篇中便已经提到，<strong>单参的构造函数</strong>可以实现类型转换的功能。</p><p><a href="https://bao-gai-yu.github.io/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/#%E5%8D%95%E5%8F%82%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95">过去看看~</a></p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol><li>类型转换函数名的前面，<strong>不能指定函数类型</strong></li><li><strong>类的</strong>类型转换函数<strong>没有参数</strong>（其实是隐含了<code>this</code>指针）</li><li>类型转换函数的返回类型，由函数名中<strong>指定的类型名来确定</strong>。</li><li>类的类型转换函数<strong>只能作为成员函数</strong>，因为转换的主体是本类的对象。不能作为友元函数或普通函数。</li><li>类型转换函数与运算符重载函数相似，都是用关键字<code>operator</code>开头，区别在于<strong>被重载的是类型名</strong>。</li><li>“转换构造函数”和“类型转换函数”有一个共同的功能：当需要的时候，编译系统会自动调用这些函数，建立一个<strong>无名的临时对象（或临时变量）</strong>。</li></ol><h1 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h1><p>如果一开始学习的是<code>C</code>语言，那么对于<code>scanf</code>和<code>printf</code>一定不陌生吧,它们分别用于数据的<strong>输入</strong>和<strong>输出</strong>。</p><p>而到了<code>C++</code>的学习时，输入输出变成了使用<code>cin</code>和<code>cout</code>，配合上运算符<code>&gt;&gt;</code>和<code>&lt;&lt;</code>，看起来和<code>C</code>的输入输出方式大相径庭，但是不管这些，使用<strong>流输入输出</strong>，很方便不是吗？可以根据变量的类型智能读入数据。如果搞过竞赛的话，相信碰到过超大数据导致<code>TLE</code>的情况，这时候就有可能<code>cin</code>与<code>cout</code>太慢了，于是就会使用下面两句代码来提升读取速度：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std:;ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这两句可以让<code>cin</code>和<code>cout</code>的效率比肩<code>scanf</code>和<code>printf</code>，但是怎么实现的姑且不提。</p><p>我们主要讲讲<code>C++</code>中的三种输入输出流：</p><h2 id="1-标准I-O-iostream"><a href="#1-标准I-O-iostream" class="headerlink" title="1)标准I/O - iostream"></a>1)标准I/O - iostream</h2><p>对<strong>系统指定的标准设备</strong>的输入和输出。即从<code>键盘</code>输入数据，输出到<code>显示器屏幕</code>。</p><p><code>C++</code>的输入输出流，是指<strong>由若干字节组成的字节序列</strong>，这些字节中的数据按顺序从一个对象传送到另一个对象，就像水流，电流一样，信息从<strong>源</strong>到<strong>目的端</strong>的流动。</p><ul><li>输入操作时：字节流从输入设备（如键盘，磁盘）流向内存。</li><li>输出操作时：字节流从内存流向输出设备（如屏幕，打印机，磁盘等）。</li></ul><p>流中的内容可以是<strong>ASCII字符、二进制形式的数据、图形图像、数字音频视频</strong>或其它形式的信息。</p><p>输入输出流被定义为<code>类</code>。使用<code>cin/cout</code>时，需要包含头文件<code>iostream</code>，分别对应<strong>标准输入流</strong>和<strong>标准输出流</strong>。此外还有<code>cerr</code>和<code>clog</code>，都对应于<strong>标准错误输出流</strong>。</p><h3 id="标准输入流"><a href="#标准输入流" class="headerlink" title="标准输入流"></a>标准输入流</h3><p>在头文件<code>istream</code>中定义了输入流对象：<code>cin</code>。</p><p>1）<code>&gt;&gt;</code>从流中提取数据时，会过滤掉输入流中的不可见字符，如<code>空格</code>、<code>回车</code>、<code>制表符Tab</code>等。</p><p>2）只有在输入完数据，按回车键后，该行数据才被送入<strong>输入缓冲区</strong>，形成输入流，提取运算符<code>&gt;&gt;</code>才能从中提取数据。</p><ul><li><p><strong>缓冲区</strong>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> a,b;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Give me a string:&quot;</span>;<br>    cin &gt;&gt; a;<span class="hljs-comment">//输入123456789</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cin.<span class="hljs-built_in">get</span>(b);<span class="hljs-comment">//从输入流中获取一个字符</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>    cin.<span class="hljs-built_in">getline</span>(str,<span class="hljs-number">5</span>);<span class="hljs-comment">//</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Give me a string:<span class="hljs-number">123456789</span><br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br>str = <span class="hljs-number">3456</span><br></code></pre></td></tr></table></figure><h3 id="输入流的一些函数"><a href="#输入流的一些函数" class="headerlink" title="输入流的一些函数"></a>输入流的一些函数</h3><ul><li><p><code>get</code>函数，有多种重载</p><ol><li><p><code>int get()</code></p><p>从流中读取一个字符，返回该字符的<code>ASCII码值</code>。如果读到文件末尾，返回<code>EOF</code>，表示<code>end of file</code>，在控制台中输入<code>Ctrl+Z</code>表示<code>EOF</code>。</p></li><li><p><code>istream&amp; get(char&amp; ch)</code></p><p>从输入流中读取一个字符并存放在<code>ch</code>中，返回cin本身。</p><p>上例中流中本来为<code>123456789</code>，get之后<code>a</code>的值为<code>1</code>，流中还剩下<code>23456789</code>。</p></li><li><p><code>istream&amp; get(char* buffer,int n,char ch=&#39;\n&#39;)</code></p><p>从输入流中<strong>读取n-1个字符</strong>，或者遇到第三个参数指定的终止符，并由系统自动补上一个<code>\0</code>字符，存放到<code>buffer</code>指针指向的内存空间中。</p><p><strong>注意：终止符并不会被读入到buffer中，仍会留在输入流缓冲区中。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//例子</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">20</span>],c;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter a sentence:&quot;</span> &lt;&lt; endl;<br>    cin.<span class="hljs-built_in">get</span>(str,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;5&#x27;</span>);<br>    cin.<span class="hljs-built_in">get</span>(c);<br>    cout &lt;&lt; <span class="hljs-string">&quot;str[] = &quot;</span> &lt;&lt; str &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入为<code>1234567890</code>，输出为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Enter a sentence:<br><span class="hljs-number">1234567890</span><br>str[] = <span class="hljs-number">1234</span><br>c = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>可见<code>5</code>仍在输入流中，直到被<code>c</code>读取。</p></li></ol></li><li><p><code>getline</code>函数（<code>istream</code>类的成员函数）</p><p><code>istream&amp; getline(char* buffer,int n,char ch=&#39;\n&#39;</code>，有<strong>3</strong>个参数</p><ol><li><p>第一个参数为<strong>由谁</strong>获取数据。</p></li><li><p>第二个参数为读取长度，但是<strong>实际</strong>读取到<code>str</code>中的字符<strong>长度会-1</strong>，因为要在字符串末尾留出一个位置添加<code>\0</code>。</p></li><li><p>第三个参数是<strong>截止符号</strong>，即读取到该字符时，不管是否已经到读取长度，均停止读取。该参数可以缺省，默认值是<code>\n</code>。</p><p><strong>注意：</strong></p><ol><li><code>getline</code>和<code>get</code>的区别是<strong>getline遇到结束符会将该结束符从缓冲区中丢弃！</strong></li><li><code>buffersize</code><strong>最好与目标数组大小一致！</strong>目标容量大于<code>buffersize</code>会导致空间浪费，而目标容量小于<code>buffersize</code>则是致命的，会<strong>爆数组</strong>。</li></ol></li></ol></li><li><p><code>getline</code>函数（全局函数）</p><p><code>getline(cin,string串,&#39;\n&#39;)</code> ，用于读取<strong>整行数据</strong>，并且第二个参数为<code>string</code>类对象。第三个参数为<strong>可缺省的</strong>结束符，缺省值为<code>&#39;\n&#39;</code>。</p></li><li><p><code>ignore</code>函数</p><p><code>istream&amp; ignore(int n=1,int delim=EOF);</code></p><p>作用：跳过输入流中的<code>n</code>个字符，或在遇到指定的终止字符时提前结束（会跳过包括<code>delim</code>在内的若干字符）。</p><p>在使用时，因为<code>ignore</code>两个参数都具有<strong>默认值</strong>，所以实际效果，<code>cin.ignore()</code>和<code>cin.get()</code>并无二致。</p></li><li><p><code>read</code>函数</p><p><code>istream&amp; read(char* buffer,int n);</code></p><p>从输入流中读取<code>n</code>个字符，<strong>注意是n个，并不会在字符串末尾补’\0’。</strong>且<strong>没有结束符，必须读入n个字符</strong>，如果读取字符不足会继续等待输入。</p></li></ul></li></ul><p>3）需要注意保证从流中读取的数据能正常运行。</p><p><strong>Tip：</strong></p><p><code>cin</code>本质上与其它<code>C++</code>变量一样，<code>cin</code>也是一个变量名，它是一个<code>istream</code>类型的对象。</p><p>而变量名通常代表着一段内存区域，<code>cin</code>也映射到一段内存区域（也就是<strong>输入缓冲区</strong>）。</p><p>简单理解为键盘输入的信息先存放在<code>cin</code>中，再被<strong>流提取运算符</strong><code>&gt;&gt;</code>提取到<strong>内存</strong>中。</p><h3 id="标准输出流"><a href="#标准输出流" class="headerlink" title="标准输出流"></a>标准输出流</h3><p>在头文件<code>ostream</code>中定义了输出流对象：<code>cout</code>。</p><p>1)使用它不必考虑数据是什么类型，系统会自动判断数据的类型，根据其类型选择调用与之匹配的的运算符重载函数。</p><p>2）输出流也开辟了一个缓冲区，用来存放流中的数据，当缓冲区满时输出到屏幕。</p><ul><li><p><code>endl</code>和<code>\n</code>的区别</p><p>这两个在输出的效果都是<strong>换行</strong>，但两者本质上是不同的。</p><ul><li><code>endl</code>实际上是一个<strong>函数模板</strong>，作为一个<code>IO操作符</code>，当输出缓冲区中插入一个<code>endl</code>，则不论缓冲区是否已满，都将<strong>立即输出流中的所有数据，然后插入一个换行符,并且此时缓冲区已被清空。</strong></li></ul></li><li><p>而<code>\n</code>只是一个字符，与其它<code>ASCII字符</code>无异。</p></li></ul><h4 id="输出流的一些函数"><a href="#输出流的一些函数" class="headerlink" title="输出流的一些函数"></a>输出流的一些函数</h4><ul><li><code>put</code>函数，输出<strong>单个</strong>字符</li><li><code>write</code>函数，输出指定的<strong>字符串</strong></li><li><code>tellp</code>函数，用于<strong>获取</strong>当前输出流指针的位置</li><li><code>seekp</code>函数，用于<strong>设置</strong>输出流指针的位置</li></ul><h3 id="流操纵算子"><a href="#流操纵算子" class="headerlink" title="*流操纵算子"></a>*流操纵算子</h3><table><thead><tr><th align="center">流操纵算子</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>dec</code></td><td align="center">以十进制输出整数</td></tr><tr><td align="center"><code>hex</code></td><td align="center">以八进制输出整数</td></tr><tr><td align="center"><code>oct</code></td><td align="center">以十六进制输出整数</td></tr><tr><td align="center"><code>fixed</code></td><td align="center">以普通小数的形式输出浮点数</td></tr><tr><td align="center"><code>scientific</code></td><td align="center">以科学计数法形式输出浮点数</td></tr><tr><td align="center"><code>left</code></td><td align="center">左对齐，即宽度不足时将填充字符添加到右边</td></tr><tr><td align="center"><code>right</code></td><td align="center">右对齐，即宽度不足时将填充字符添加到左边</td></tr><tr><td align="center"><code>setbase(b)</code></td><td align="center">设置输出整数时的进制，b=8、10或16</td></tr><tr><td align="center"><code>setw(w)</code></td><td align="center">指定输出宽度为w或者读入w个字符（<strong>该算子所起的作用是一次性的</strong>）</td></tr><tr><td align="center"><code>setfill(c)</code></td><td align="center">设置填充字符，即宽度不足时用<code>c</code>填充，默认是<code>空格</code></td></tr><tr><td align="center"><code>setprecision(n)</code></td><td align="center">设置浮点数的精度为<code>n</code> <strong>在与</strong><code>fixed</code><strong>算子配合使用的情况下，n表示小数位数。</strong></td></tr><tr><td align="center"><code>setiosflags(flag)</code></td><td align="center">设置某一个标志的值为<code>1</code></td></tr><tr><td align="center"><code>resetiosflags(flag)</code></td><td align="center">设置某一个标志的值为<code>0</code></td></tr></tbody></table><p>以下是<code>setiosflags(flag)</code>和<code>resetiosflags(flag)</code>中<code>flag</code>可以为的值：</p><table><thead><tr><th align="center">标志</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>ios::left</code></td><td align="center">输出数据在本域宽范围内向左对齐</td></tr><tr><td align="center"><code>ios::right</code></td><td align="center">输出数据在本域宽范围内向右对齐</td></tr><tr><td align="center"><code>ios::internal</code></td><td align="center">数值的符号位在域宽内向左对齐，数值向右对齐，中间由填充字符填充</td></tr><tr><td align="center"><code>ios::dec</code></td><td align="center">设置整数的基数为10</td></tr><tr><td align="center"><code>ios::oct</code></td><td align="center">设置整数的基数为8</td></tr><tr><td align="center"><code>ios::hex</code></td><td align="center">设置的整数的基数为16</td></tr><tr><td align="center"><code>ios::showbase</code></td><td align="center">强制输出整数的基数（八进制以0开头，十六进制以0x开头）</td></tr><tr><td align="center"><code>ios::showpoint</code></td><td align="center">强制输出浮点数的小数点和尾数0</td></tr><tr><td align="center"><code>ios::uppercase</code></td><td align="center">在以科学计数法格式E和以十六进制输出字母时以大写表示</td></tr><tr><td align="center"><code>ios::showpos</code></td><td align="center">对正数显示”+”号</td></tr><tr><td align="center"><code>ios::scientific</code></td><td align="center">浮点数以科学计数法格式输出</td></tr><tr><td align="center"><code>ios::fixed</code></td><td align="center">浮点数以定点格式（小数形式）输出</td></tr><tr><td align="center"><code>ios::unitbuf</code></td><td align="center">每次输出后刷新所有的流</td></tr><tr><td align="center"><code>ios::stdio</code></td><td align="center">每次输出后清除<code>stdout</code>和<code>stderr</code></td></tr></tbody></table><h3 id="重载-gt-gt-和-lt-lt-运算符"><a href="#重载-gt-gt-和-lt-lt-运算符" class="headerlink" title="重载&gt;&gt;和&lt;&lt;运算符"></a>重载<code>&gt;&gt;</code>和<code>&lt;&lt;</code>运算符</h3><p>我们已经学习了<code>C++</code>中的类，那对类的数据的输入输出是<strong>借助类的成员函数</strong>实现的，比如我们手上有一个复数类<code>Complex</code>类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> r,i;<br>cin&gt;&gt;r&gt;&gt;i;<br><span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(r,i)</span></span>;<br>c1.<span class="hljs-built_in">display</span>();<br></code></pre></td></tr></table></figure><p>但是这<strong>不符合使用习惯</strong>，我们更希望能写成这样的形式，就跟对普通变量的输入输出一样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">Complex c1;<br>cin&gt;&gt;c1;<br>cout&lt;&lt;c2;c<br></code></pre></td></tr></table></figure><p>那么我们就可以对<code>&lt;&lt;</code>和<code>&gt;&gt;</code>运算符进行重载。</p><p>用<code>&lt;&lt;</code>来举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout&lt;&lt;x&lt;&lt;y;<br></code></pre></td></tr></table></figure><p>它有两个含义：</p><ol><li><code>&lt;&lt;</code>是一个二目运算符，进行了<strong>两次</strong>调用。第一次左操作数为<code>cout</code>，右操作数为<code>x</code>；第二次左操作数为<code>cout</code>，右操作数为<code>y</code>。</li><li>这里是对象<code>cout</code>调用了<code>ostream</code>类的<strong>成员函数</strong><code>operator&lt;&lt;()</code>。</li></ol><p>据此，当我们对<code>cout</code>进行重载的时候应该可以得出以下结论：</p><ol><li><strong>不能将运算符的重载函数定义为Complex类的成员函数</strong>，须定义为外部函数。如果访问了<strong>私有</strong>成员，还必须声明为<strong>友元</strong>。这是因为<code>&lt;&lt;</code>运算符是由<code>ostream</code>对象<code>cout</code>来调用的。</li><li>重载函数的函数类型应当为<strong>引用</strong>，目的是能够连续调用，实现连续输出。</li><li>重载函数的两个参数都应当为<strong>引用</strong>，并且要被输出的对象应当为<strong>常引用</strong>，防止数据被篡改。</li></ol><p>所以，我们就能写出符合需求的重载函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out,<span class="hljs-type">const</span> Complex&amp; obj)&#123;<span class="hljs-comment">//左操作数为ostream的对象的引用</span><br>    out&lt;&lt;obj.real;<span class="hljs-comment">//右操作数为要被输出的对象</span><br>    <span class="hljs-keyword">if</span>(obj.imag&gt;<span class="hljs-number">0</span>)<br>        out&lt;&lt;<span class="hljs-string">&#x27;+&#x27;</span>&lt;&lt;obj.imag&lt;&lt;<span class="hljs-string">&#x27;i&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(obj.imag&lt;<span class="hljs-number">0</span>)<br>        out&lt;&lt;obj.imag&lt;&lt;<span class="hljs-string">&#x27;i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> out;<span class="hljs-comment">//返回ostream对象本身，以便后续的调用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而运算符<code>&gt;&gt;</code>与之类似，只不过是<code>ostream</code>变成了<code>istream</code>。</p><h2 id="2-文件I-O-fstream"><a href="#2-文件I-O-fstream" class="headerlink" title="2)文件I/O - fstream"></a>2)文件I/O - fstream</h2><p>文件I/O不再对系统默认的I/O设备进行输入输出，因此<code>&lt;fstream&gt;</code>头文件中没有预先定义好的类似<code>cin</code>和<code>cout</code>的对象，需要用户自行定义<strong>文件流对象</strong>（<code>fin</code>和<code>fout</code>等），作为文件I/O流的载体。用户可以通过如下的语句，来定义文件对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">fstream myFile;<br>ifstream fin;<br>ofstream fout;<br></code></pre></td></tr></table></figure><p>这样创建一个文件输入对象和一个文件输出对象，但是两者<strong>都没有绑定到对应的文件</strong>，因此无法完成任何输入输出操作。我们可以通过<code>fin.open(&quot;in.txt&quot;);</code>，即<strong>open函数</strong>来绑定一个文件，或者在定义对象时使用<strong>构造函数</strong>直接绑定一个文件<code>ofstream fout(&quot;out.txt&quot;);</code>。</p><p>当我们绑定了一个文件之后，还要指定文件的使用方式是诸如只读、只写、既读又写、在文件末尾添加数据、以文本方式使用、以二进制方式使用等等。我们可以使用诸如<code>myFile(&quot;out.txt&quot;,ios::out | ios::app);</code>等语句，该语句表示<code>myFile</code>绑定了<code>out.txt</code>，并以“输出”和“追加”的方式使用 。以下是<strong>模式标记</strong>表格：</p><table><thead><tr><th align="center">模式标记</th><th align="center">适用对象</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>ios::in</code></td><td align="center"><code>ifstream</code> <code>fstream</code></td><td align="center">打开文件用于读取数据，如果文件不存在，则打开失败。 是<code>ifstream</code>和<code>ofstream</code>对象的默认值</td></tr><tr><td align="center"><code>ios::out</code></td><td align="center"><code>ofstream</code> <code>fstream</code></td><td align="center">打开文件用于读取数据，<strong>如果文件不存在，则新建文件。</strong> 如果文件已经存在，则打开时会<strong>清空文件的内容</strong>，除非带有<code>ios::in</code>或者<code>ios::app</code> 是<code>ifstream</code>和<code>ofstream</code>对象的默认值</td></tr><tr><td align="center"><code>ios::ate</code></td><td align="center"><code>ifstream</code></td><td align="center">打开一个文件，并将文件的<strong>读指针</strong>指向文件<strong>末尾</strong>。如果文件不存在， 则打开失败。并且，文件打开时，<strong>不会清空文件。</strong> <code>ate</code>是<strong>at the end</strong>的缩写</td></tr><tr><td align="center"><code>ios::app</code></td><td align="center"><code>ofstream</code> <code>fstream</code></td><td align="center">打开文件，将文件<strong>写指针</strong>置于文件的<code>EOF</code>处，用于在文件末尾添加数据，如果 文件不存在，则<strong>新建</strong>该文件。如果顺利打开，则<strong>不清空</strong>文件。</td></tr><tr><td align="center"><code>ios::trunc</code></td><td align="center"><code>ofstream</code></td><td align="center">打开文件时会<strong>清空</strong>内部存储的所有数据（如果文件已存在，则先删除该文件） 单独使用时与<code>ios::out</code>相同</td></tr><tr><td align="center"><code>ios::binary</code></td><td align="center"><code>ifstream</code> <code>ofstream</code> <code>fstream</code></td><td align="center">以<strong>二进制</strong>的方式打开文件，缺省时以文本文件打开</td></tr></tbody></table><p>使用完文件对象之后或者要换一个文件进行绑定，必须要先解除原来绑定的文件，通过<code>close</code>函数进行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">fin.<span class="hljs-built_in">close</span>();<br>fout.<span class="hljs-built_in">close</span>();<br>myFile.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><h3 id="seekp、seekg和tellp、tellg"><a href="#seekp、seekg和tellp、tellg" class="headerlink" title="seekp、seekg和tellp、tellg"></a>seekp、seekg和tellp、tellg</h3><ul><li><p><code>seekp </code>将<strong>输出</strong>文件中<strong>写指针</strong>移到指定的位置</p><p>原型为<code>ostream&amp; seekp(int offset,int mode);</code></p><p>将指针从<code>mode</code>处开始，移动<code>offset</code>个字节。</p><p><code>mode</code>为文件读写指针的设置模式，有三种选项：</p><table><thead><tr><th align="center">mode标志</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>ios:beg</code> （默认值）</td><td align="center">从<strong>文件头</strong>开始计算偏移量(<code>offset=0</code>为文件开头，<code>offset</code>为非负数) 即<code>ostream&amp; seekp(int offset);</code></td></tr><tr><td align="center"><code>ios::end</code></td><td align="center">从<strong>文件末尾</strong>开始计算偏移量(<code>offset=0</code>为文件尾，<code>offset</code>为0或负数)</td></tr><tr><td align="center"><code>ios::cur</code></td><td align="center">从<strong>当前位置</strong>开始计算偏移量(<code>offset&gt;0</code>往文件尾部移动，<code>offset&lt;0</code> 往文件头部移动)</td></tr></tbody></table></li><li><p><code>seekg </code>将<strong>输入</strong>文件中指针移到指定的位置</p><p>原型为<code>istream&amp; seekg(int offset,int mode);</code></p><p>作用效果与<code>seekp</code>一直，只不过是<strong>读指针</strong>。</p></li><li><p><code>tellp</code>返回<strong>输出</strong>指针的当前位置</p></li><li><p><code>tellg</code>返回<strong>输入</strong>指针的当前位置</p></li></ul><p><strong>Tips：g-&gt;get；p-&gt;put。</strong></p><h2 id="3-串I-O-stringstream"><a href="#3-串I-O-stringstream" class="headerlink" title="3)串I/O - stringstream"></a>3)串I/O - stringstream</h2><p>暂不做讨论。</p>]]></content>
    
    
    <categories>
      
      <category>C++整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>模板</tag>
      
      <tag>重载</tag>
      
      <tag>输入输出流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cpp_复习整理_1_类与对象</title>
    <link href="/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/"/>
    <url>/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/</url>
    
    <content type="html"><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><hr><p>大一终于结束了，经过了一年的C++学习，是时候对所学知识进行整理与总结了。</p><p>其实老早就可以总结了，但是我懒癌，并且这个博客前天才刚建好，故这个系列只对大一下所学的“面向对象编程”部分进行整理与总结。</p><img src="/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/default.png" class=""><hr><h1 id="面向过程编程-VS-面向对象编程"><a href="#面向过程编程-VS-面向对象编程" class="headerlink" title="面向过程编程 VS 面向对象编程"></a>面向过程编程 VS 面向对象编程</h1><h2 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h2><p>是一种传统的设计方法，围绕着功能进行编程。</p><p><strong><center>程序=数据结构+算法</center></strong></p><p>​            <img src="/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/1.png" class="" title="程序&#x3D;数据结构+算法"></p><p>并且往往具有以下的特征</p><ul><li>用一个函数实现一个功能</li><li>所有的数据都是公用的</li><li>一个函数可使用任何一组数据</li><li>一组数据可被多个函数使用</li></ul><p>但是这样结构化的程序设计，在程序规模增大的过程中，渐渐显示出不足。</p><p>软件业的目标是更快、更正确、更经济地建立软件。其中，就需要实现两个目标：</p><ol><li>如何更高效的实现函数的复用？</li><li>如何更清晰的实现变量和函数的关系？使得程序更清晰更易于修改和维护。</li></ol><p>而结构化程序设计中，程序的大量函数、变量之间的关系错综复杂，要抽取部分代码来实现复用，会变得十分困难。</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>因此，面向对象的程序设计方法，应运而生。</p><p><strong><center>面向对象的程序=类+类+类+类+…+类</center></strong></p><p>而设计程序的过程，就是设计类的过程。</p><p>是围绕着现实世界的实体（对象）进行设计；程序设计者从“设计函数功能”转向“设计类和对象”，即如何用属性和行为来描述一个实体，如何向实体发送消息以调度实体的行为。这是一种以认识世界的方法为参考的程序设计方法，更为自然，有利于大型程序的组织和实现。</p><hr><h1 id="类与对象的实现"><a href="#类与对象的实现" class="headerlink" title="类与对象的实现"></a>类与对象的实现</h1><h2 id="如何声明一个类"><a href="#如何声明一个类" class="headerlink" title="如何声明一个类"></a>如何声明一个类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">rectangle</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>)&#123;<br>        len=l;<br>        wid=w;<br>    &#125;<br>    ~<span class="hljs-built_in">rectangle</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> w)</span></span>&#123;<br>        len=l;<br>        wid=w;<br>    &#125;<br>   <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> len*wid;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">perimeter</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*(len+wid);<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> len;<br>    <span class="hljs-type">double</span> wid;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如上，我们声明了一个矩形类，其中包含了public的成员函数：<code>构造函数</code>，<code>析构函数</code>，<code>设置长宽函数setData</code>,<code>面积函数area</code>，以及<code>周长函数perimeter</code>，以及private的数据成员：<code>len</code>，<code>wid</code>。</p><p>类中可以设置<code>变量</code>作为数据成员，也可以设置<code>函数</code>作为成员函数(同时也被称作<code>方法</code>)。</p><ul><li><p><strong>注意：</strong>类本身的类型<strong>不能</strong>作为<code>数据成员</code>的类型！但是指向类本身的<code>指针</code>可以。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">obj</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    obj childObj;<span class="hljs-comment">//不合法</span><br>    <br>    obj* nextObj;<span class="hljs-comment">//合法</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="成员访问限定符"><a href="#成员访问限定符" class="headerlink" title="成员访问限定符"></a>成员访问限定符</h3><p>类中的成员可以设置<code>成员访问限定符</code>，即<code>public</code>，<code>protected</code>，<code>private</code>。</p><p>如果一个成员没有给出<code>成员访问限定符</code>，则默认为<code>private</code>。</p><ul><li><code>public</code>公有的：权限最开放，在<strong>类的外部</strong>，用户也可以通过成员运算符(<code>.</code>和<code>-&gt;</code>)来访问该数据成员和成员函数。</li><li><code>private</code>私有的：在<strong>类的外部</strong>，用户不能通过成员运算法(<code>.</code>和<code>-&gt;</code>)来访问该数据成员和成员函数。只有类的<code>成员函数</code>和<code>友元函数</code>才能访问。</li><li><code>protected</code>受保护的：如果不进行类的<code>派生和继承</code>，其访问特性与<code>private</code>是完全相同的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">obj</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(obj)</span></span>;<br>    <span class="hljs-type">int</span> data1;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-type">int</span> data2;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun4</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-type">int</span> data3;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">obj::fun1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//均合法，fun1为成员函数，为类内访问</span><br>    <span class="hljs-type">int</span> tmp=data3;<br>    tmp=data2;<br>    <span class="hljs-built_in">fun3</span>();<br>    <span class="hljs-built_in">fun4</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(obj myObj)</span></span>&#123;<span class="hljs-comment">//均合法，fun2为友元函数，可以访问private和protected的成员</span><br>    <span class="hljs-type">int</span> tmp=myObj.data3;<br>    tmp=myObj.data2;<br>    myObj.<span class="hljs-built_in">fun3</span>();<br>    myObj.<span class="hljs-built_in">fun4</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    obj myObj1;<br>    obj* myObj2=<span class="hljs-keyword">new</span> obj;<br>    <span class="hljs-type">int</span> tmp;<br>    tmp=myObj1.data1;<span class="hljs-comment">//合法</span><br>    tmp=myObj1.data2;<span class="hljs-comment">//不合法，因为data2是私有成员，不能通过成员运算符在类外访问。</span><br>    tmp=myObj2-&gt;data3;<span class="hljs-comment">//不合法，此处protected和private作用一样</span><br>    myObj2-&gt;<span class="hljs-built_in">fun1</span>();<span class="hljs-comment">//合法，且-&gt;运算符用于指针的成员运算。</span><br>    myObj1.<span class="hljs-built_in">fun3</span>();<span class="hljs-comment">//不合法，fun3()为私有成员</span><br>    myObj1.<span class="hljs-built_in">fun4</span>();<span class="hljs-comment">//不合法，受保护成员也不能从外部访问。</span><br>    <span class="hljs-keyword">delete</span> myObj2;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常成员"><a href="#常成员" class="headerlink" title="常成员"></a>常成员</h3><h4 id="常数据成员"><a href="#常数据成员" class="headerlink" title="常数据成员"></a>常数据成员</h4><p>用<code>const</code>进行修饰的数据成员称为<code>常数据成员</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//有两种声明形式</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> <span class="hljs-type">const</span> x;<br></code></pre></td></tr></table></figure><ol><li>任何函数都不能对<code>const</code>数据成员赋值。</li><li>构造函数对<code>const</code>数据成员进行初始化时只能通过<a href="#%E5%8F%82%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8"><code>参数初始化列表</code></a>进行。</li><li><code>const</code>数据成员的值不能改变，所以不能对其进行赋值，只能对其进行初始化。因此<code>const</code>数据成员在<strong>初始化时必须进行赋值</strong>。</li><li>如果类中有多个构造函数，则<strong>每个</strong>构造函数<strong>必须</strong>都要初始化<code>const</code>数据成员。</li></ol><h4 id="常成员函数"><a href="#常成员函数" class="headerlink" title="常成员函数"></a>常成员函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//声明</span><br>&lt;类型标识符&gt; 函数名(参数表)<span class="hljs-type">const</span>;<br></code></pre></td></tr></table></figure><ol><li><code>const</code>作为函数的一部分，可以作为<code>函数重载</code>的区分，因此在<code>声明</code>和<code>定义</code>时都必须要有<code>const</code>关键字。</li><li>而在函数调用时，<code>const</code>不一定<strong>是必须的。若</strong>不是同时具有**两个同类型同名同参的函数，区别仅仅<code>const</code>关键字，这时候函数调用时<code>const</code>就不是必须的。</li><li>常成员函数可以引用<code>const</code>或者<code>非const</code>数据成员，但是不能“<strong>修改</strong>”它们。即：<code>常成员函数不能更新任何数据成员</code>。因此，常成员函数多用于数据的输出等操作。</li><li><code>const</code>成员函数不能调用<code>非const</code>成员函数，而<code>非const</code>成员函数可以调用<code>const</code>成员函数。</li></ol><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><h4 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h4><p>是一种特殊的数据成员，以关键字<code>static</code>开头。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> data;<span class="hljs-comment">//只是变量声明</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> data1;<br>&#125;stu;<br></code></pre></td></tr></table></figure><ol><li><p>属于类，是类的派生，不属于任何一个单独的对象，由类的所有对象共享的数据，<strong>不占用具体实例的空间</strong>。</p></li><li><p><strong>只能</strong>在<strong>类外初始化</strong>,如果未赋初值，则<strong>默认为0</strong>。不能用<code>参数初始化列表</code>进行初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> student::data=<span class="hljs-number">114514</span>;<span class="hljs-comment">//不加static</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> student::data1=<span class="hljs-number">1919810</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>static</code>数据成员在程序开始运行时被分配空间，到程序结束时才释放空间——也就是它有着<strong>全局寿命</strong>。</p></li><li><p>静态数据成员的使用：可以通过<strong>类名</strong>引用，如<code>student::data</code>；也可以通过<strong>对象名</strong>引用，如<code>stu.data1</code>。建议使用<strong>类名</strong>来引用静态成员，代码更清晰，通过对象名的引用也<strong>仅仅是使用了该对象的“类型”</strong>。</p></li><li><p>静态数据成员相当于<code>类域的全局变量</code>。</p></li><li><p>静态数据成员可以成为成员函数的参数，而普通成员变量不可以。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>    <span class="hljs-type">int</span> data1;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> data2;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> data1)</span></span>;<span class="hljs-comment">//ERROR</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-type">int</span> data2)</span></span>;<span class="hljs-comment">//OK，静态数据成员相当于确定值</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">obj</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>&#125;myObj;<br></code></pre></td></tr></table></figure><p>和静态数据成员一样，是类的一部分，而不是对象的一部分。</p><p>调用时使用类名或者对象名来访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">obj::<span class="hljs-built_in">fun</span>();<br>myObj::<span class="hljs-built_in">fun</span>();<br></code></pre></td></tr></table></figure><ol><li><p>静态成员函数<strong>不隐含<code>this</code>指针</strong>，故<strong>不能访问非静态成员</strong>，通常只用于访问静态成员。但非静态成员函数可以调用静态成员函数。</p><p>而普通成员函数具有<code>this</code>指针，访问类内的成员时，直接写数据成员名或成员函数名，前方自动略写了<code>(*this).</code>这种访问称为<strong>默认访问</strong>。</p></li><li><p>不能同时用<code>static</code>和<code>virtual</code>两个关键字修饰一个成员函数，即：<strong>虚函数不能是static函数</strong>。因为虚函数必须要通过对象调用，必须要有隐藏的<code>this</code>指针。并且<code>static</code>成员函数是在编译时<strong>静态决议</strong>的，而<code>virtual</code>成员函数是<strong>动态决议</strong>的（运行时才绑定）。</p></li></ol><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><h4 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h4><p>如果将<code>类B</code>声明为<code>类A</code>的友元类，那么<code>友元类B</code>中的所有函数都是<code>类A</code>的友元函数，可以访问<code>类A</code>中的所有成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;...&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">friend</span> B;<br>    <span class="hljs-comment">//或者写成 friend class B;</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>通常不把整个类声明成友元,<strong>只把有需要的成员函数声明成友元</strong>，这样更安全。</p><h4 id="友元函数-1"><a href="#友元函数-1" class="headerlink" title="友元函数"></a>友元函数</h4><p><code>友元函数</code>不是一个类的成员函数。通常的习惯是<code>类内声明+类外定义</code>。友元函数是独立于任何类的一般的外界函数，所以它没有<code>this</code>指针，即<strong>不支持默认访问</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">obj</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;...&#125;<span class="hljs-comment">//类外定义时不加friend</span><br></code></pre></td></tr></table></figure><h4 id="友元成员"><a href="#友元成员" class="headerlink" title="友元成员"></a>友元成员</h4><p>注意与<code>友元函数</code>的区别。</p><p>一个<strong>类的成员函数</strong>可以声明为另一个类的友元，这类成员被称为<code>友元成员</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">friend</span> 类名::成员函数名();<br></code></pre></td></tr></table></figure><p>友元函数和友元成员可统称为“友元函数”，可以访问类的<code>private</code>成员。</p><h4 id="友元的注意点"><a href="#友元的注意点" class="headerlink" title="友元的注意点"></a>友元的注意点</h4><ol><li><p>友元不具有传递性：</p><p>A是B的朋友，而B是C的朋友，但是<strong>A不是C的朋友</strong>。</p></li><li><p>友元关系是<strong>单向</strong>的，不具有交换性。</p><p><code>A</code>声明<code>B</code>是自己的朋友，但是<strong>B并不是A的朋友</strong>，因为<code>B</code>没有声明<code>A</code>是自己的朋友。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">friend</span> B;<br>    ...<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;...&#125;;<br></code></pre></td></tr></table></figure><p><code>B</code>可以访问<code>A</code>的私有成员，但<code>A</code>不能访问<code>B</code>的私有成员。</p></li><li><p>友元关系不受<code>成员访问限定符</code>的影响，友元的声明可以出现在类中的任何地方。</p></li></ol><h3 id="成员函数的类内与类外定义"><a href="#成员函数的类内与类外定义" class="headerlink" title="成员函数的类内与类外定义"></a>成员函数的类内与类外定义</h3><h4 id="类内定义"><a href="#类内定义" class="headerlink" title="类内定义"></a>类内定义</h4><p>如上一段代码，函数定义就属于类内定义。直接将函数体写在类声明内部。</p><h5 id="内联函数-inline关键字"><a href="#内联函数-inline关键字" class="headerlink" title="内联函数-inline关键字"></a>内联函数-inline关键字</h5><p>可以在函数首部的前方添加<code>inline</code>关键字，使其成为<code>内联函数</code>，其效果为，在调用到该函数的地方直接将函数体内的代码展开，<strong>节省了调用的过程所花费的时间</strong>。</p><ul><li><code>inline</code>说明对于编译器只是一个<strong>建议</strong>，编译器可以选择忽略这个建议。例如将一个长达1000行的函数声明为<code>内联函数</code>，编译器会无视这个<code>inline</code>的建议，仍旧将这个函数设置为普通函数。</li><li>在类内直接定义的函数，不需要<code>inline</code>修饰，编译器也<strong>一般</strong>会将其化为<code>内联函数</code>。</li></ul><h6 id="慎用内联函数"><a href="#慎用内联函数" class="headerlink" title="慎用内联函数"></a>慎用内联函数</h6><ol><li><code>内联函数</code>在每次调用函数的位置复制函数的代码。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。所以一般会选择<strong>频繁调用</strong>和<strong>代码量较少</strong>的函数设置为<code>内联函数</code>。</li><li>每一处<code>内联函数</code>的调用都会复制代码，会增加程序的代码量，增加内存开销。</li><li>函数中若带有循环，则不宜选用<code>内联函数</code>。函数本身运行时间就比调用时间长，已经没有必要使用<code>内联函数</code>。</li></ol><h5 id="类外定义"><a href="#类外定义" class="headerlink" title="类外定义"></a>类外定义</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">rectangle</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span>=<span class="hljs-number">1</span>,<span class="hljs-type">double</span>=<span class="hljs-number">1</span>);<span class="hljs-comment">//tips:函数声明时，形参类型必须写，但是形参名可以不用写。</span><br>    ~<span class="hljs-built_in">rectangle</span>(); <span class="hljs-comment">//默认值最好写在声明中，这是一个好习惯。</span><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-type">double</span>,<span class="hljs-type">double</span>)</span></span>;<br>   <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">perimeter</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> len;<br>    <span class="hljs-type">double</span> wid;<br>&#125;;<br><br>rectangle::<span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>)&#123;<br>    len=l;wid=w;<br>&#125;<br>...<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">rectangle::area</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> len*wid;<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>类外定义需要现在类内写出<code>函数声明</code>，然后在类外通过<code>返回值类型  类域分辨名::函数名(形参列表)</code>来进行<code>函数定义</code>。</p><ul><li><strong>建议：</strong>函数定义都应该在类外进行，并置于cpp文件内；而声明均在类内，并置于头文件内。这是一个好习惯。</li></ul><h2 id="怎样使用一个类和对象"><a href="#怎样使用一个类和对象" class="headerlink" title="怎样使用一个类和对象"></a>怎样使用一个类和对象</h2><h3 id="定义一个对象"><a href="#定义一个对象" class="headerlink" title="定义一个对象"></a>定义一个对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">rectangle rec1;<br><span class="hljs-function">rectangle <span class="hljs-title">rec2</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>如此，便定义了<code>rec1</code>和<code>rec2</code>这两个对象。其中<code>rec1</code>使用的是构造函数的默认参数，一个长一宽一的矩形，而<code>rec2</code>是一个长二宽二的矩形。</p><h4 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h4><p>定义对象时指定对象为常量，其数据成员的值在对象被调用时不能被改变。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//声明,const在类型前后均可</span><br>rectangle <span class="hljs-type">const</span> rec1;<br><span class="hljs-function"><span class="hljs-type">const</span> rectangle <span class="hljs-title">rec2</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)</span></span>;<br></code></pre></td></tr></table></figure><ol><li><p>常对象<strong>必须在定义时初始化</strong>，并且不能被更新。</p></li><li><p>为了防止<code>非const</code>成员函数修改常对象中的数据成员的值，**常对象只能调用<code>const成员函数</code>,以及<code>构造函数</code>和<code>析构函数</code>。</p><ul><li><p>为何如此决绝？</p><p>因为程序设计时，<code>函数声明</code>与<code>函数定义</code>大概率不会存在于同一个<code>源文件</code>中，而程序编译时是以<code>源文件</code>为单位的，因此，系统无法检测出<code>函数声明</code>与<code>函数定义</code>之间是否存在矛盾（例子：函数声明了不作修改，但是函数定义中却对某个数据成员进行了“不小心“的修改），只有等到了连接(link)甚至是运行阶段才能发现，因此编译系统值检查函数声明，只要发现调用了<code>非const</code>的成员函数，就直接报错，<strong>即使这个函数并不会对任何数据成员进行修改</strong>。</p></li></ul></li><li><p><code>非const</code>对象可以调用<code>const</code>成员函数。</p></li><li><p>常对象中可以存在<code>非const</code>成员函数，但是无法被该对象调用。而常对象中的<strong>所有数据成员</strong>均具有<code>常数据成员</code>的特征。</p></li></ol><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol><li>构造函数是每一个类都<strong>必须会有</strong>的函数。</li><li>构造函数是一种特殊的成员函数，<strong>无需用户调用</strong>，在定义新对象时由程序自动调用执行。</li><li>它的名称和<strong>类名一致</strong>，且<strong>没有函数类型</strong>，<code>void</code>也不行；因此，构造函数也<strong>没有返回值</strong>。</li><li>构造函数可以<code>重载</code>。</li><li>构造函数的分类<ul><li>无参构造函数</li><li>含参、带默认值的构造函数</li><li>复制构造函数（拷贝构造函数）</li></ul></li></ol><h3 id="无参构造函数"><a href="#无参构造函数" class="headerlink" title="无参构造函数"></a>无参构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>()&#123;&#125;<br></code></pre></td></tr></table></figure><p>如此，便是一个最简单的构造函数，它没有任何参数，也没有任何实质性的作用。</p><ul><li><p><strong>重要</strong>：如果用户没有自定义<strong>任何</strong>类型的构造函数,则编译器会提供<code>缺省的无参构造函数</code>，即上方的构造函数,没有任何形式的参数，并且函数体为空。因此，常常显式地给出一个<code>public</code>的无参构造函数，以便定义对象时被系统自动调用。</p><p>tips：即使用户定义的是<code>含参的构造函数</code>或是<code>拷贝构造函数</code>，该缺省的无参构造函数也不会提供。</p></li></ul><h3 id="含参构造函数"><a href="#含参构造函数" class="headerlink" title="含参构造函数"></a>含参构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>)&#123;len=l;wid=w;&#125;<br></code></pre></td></tr></table></figure><p>这是一个带有两个参数，且其中一个带有默认值的<code>双参构造函数</code>。</p><p>在定义对象时，在对象名后紧跟实参来调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">rectangle <span class="hljs-title">rec1</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)</span></span>;<br><span class="hljs-function">rectangle <span class="hljs-title">rec2</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//第二个参数使用的是默认参数</span><br></code></pre></td></tr></table></figure><h4 id="参数初始化列表"><a href="#参数初始化列表" class="headerlink" title="参数初始化列表"></a>参数初始化列表</h4><p>对于构造函数来进行对象的初始化，还可以采用<code>参数初始化列表</code>的形式进行，写法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>):<span class="hljs-built_in">len</span>(l),<span class="hljs-built_in">wid</span>(w)&#123;&#125;<br></code></pre></td></tr></table></figure><p>在原函数首部的括号后面加上一个<code>:</code>，采用<code>变量名(值)</code>的形式完成对成员的初始化赋值。</p><h4 id="单参构造函数的特殊用法"><a href="#单参构造函数的特殊用法" class="headerlink" title="单参构造函数的特殊用法"></a>单参构造函数的特殊用法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l)&#123;...&#125;<br><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>)&#123;...&#125;<br></code></pre></td></tr></table></figure><p>​        <strong>注意：</strong>这两种写法写在一起会产生<code>二义性错误</code>，如果调用时只给一个实参，系统将无法确定该调用哪一个构造函数。</p><p>这两个构造函数的共同特点是：        有且只有一个<code>无默认值</code>的形参</p><p>在某些特定的情况下可以起到<strong>类型转换</strong>的作用。</p><p>比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">rectangle rec1=<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>此处等号右侧，<code>int</code>整数首先通过单参构造函数<code>rectangle(5)</code>，生成一个<code>临时的无名对象</code>，再通过<code>拷贝构造函数</code>来构造<code>rec1</code>。并且构造完成之后，这个<code>临时无名对象</code>即刻被<code>析构</code>。</p><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">const</span> rectangle&amp; obj)&#123;...&#125;<br></code></pre></td></tr></table></figure><p>拷贝构造函数也是缺省构造函数的一种重载，其参数列表为同类对象的一个<code>常引用</code>，当用户没有给定拷贝构造函数的时候，编译器会加上一个<code>缺省的拷贝构造函数</code>。</p><h4 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h4><p>缺省的拷贝构造函数作用是将两个对象的数据成员进行一一复制的赋值，即简单的对拷，是<strong>“浅拷贝”</strong>构造函数。</p><p>在不涉及<strong>动态分配</strong>的空间时，这种浅拷贝大多时候不会有问题。</p><p>但是，如果类中包括了动态分配的空间，且在析构时对申请的空间进行了释放，则通过浅拷贝构造的对象，就可能导致<code>析构函数多次释放堆内存</code>的问题。</p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">obj</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">obj</span>(<span class="hljs-type">int</span> v)&#123;p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(v);&#125;<br>    <span class="hljs-built_in">obj</span>(<span class="hljs-type">const</span> obj&amp; t)&#123;p=t.v;&#125;<span class="hljs-comment">//系统默认的拷贝构造函数，实际上不会写出来</span><br>    ~<span class="hljs-built_in">obj</span>()&#123;<span class="hljs-keyword">delete</span> p;&#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> *p;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">obj <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-function">obj <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的<code>a</code>，<code>b</code>两个对象中<code>*p</code>的值均为5，且两者均指向<strong>同一个内存空间</strong>，也就是说二者的5是同一个5。</p><ul><li>这时当<code>main</code>函数结束时，系统就会报错，因为在析构<code>a</code>时，<code>p</code>中的地址所指向的空间已经在析构<code>b</code>时被释放了，这时再释放这个地址所指的空间，也就是<code>多次释放内存</code>的问题。</li></ul><p>所以为了避免这个问题，需要我们自己显式定义拷贝构造函数，而不是使用缺省的拷贝构造函数。上面例子的拷贝构造函数可以给出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">obj</span>(<span class="hljs-type">const</span> obj&amp; t)&#123;<br>    p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br>    *p=t.(*p);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>tips：</strong>此处提到析构顺序是先<code>b</code>后<code>a</code>，看上去不合常理，但这确实是这样，程序存储变量的位置属于<code>栈</code>的结构，也就是<code>LIFO表</code>，即<code>后进先出表</code>，先构造的后析构，<code>a</code>比<code>b</code>先构造，所以<code>b</code>比<code>a</code>先析构</li></ul><h4 id="何时会调用拷贝构造函数"><a href="#何时会调用拷贝构造函数" class="headerlink" title="何时会调用拷贝构造函数"></a>何时会调用拷贝构造函数</h4><ol><li><p><strong>用类的一个对象去“初始化”另一个对象时。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//形式1</span><br>Cat cat1;<br><span class="hljs-function">Cat <span class="hljs-title">cat2</span><span class="hljs-params">(cat1)</span></span>;<br><span class="hljs-comment">//形式2</span><br>Cat cat1;<br>Cat cat2 = cat1;<br></code></pre></td></tr></table></figure></li><li><p><strong>对象作为函数参数传递</strong>，按照<code>传值调用</code>的方式传递给另一个对象时，生成对象副本。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Box b)</span></span>&#123;...&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">Box <span class="hljs-title">box1</span><span class="hljs-params">(<span class="hljs-number">12</span>,<span class="hljs-number">15</span>,<span class="hljs-number">18</span>)</span></span>;<br>    <span class="hljs-built_in">fun</span>(box1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>fun</code>函数的实参为<code>box1</code>，形参为<code>b</code>，且调用方式为<code>传值调用</code>，参数传递时会调用拷贝构造函数，创建出<code>box1</code>的对象副本给<code>b</code>，参数传递的效果等同于<code>Box b=box1</code>或者<code>Box b(box1)</code>。</p></li><li><p><strong>函数返回值为类对象</strong>，当函数调用返回时，系统会调用拷贝构造函数生成一个<code>临时无名对象</code>，返回到<code>主调函数</code>处。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Box <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">Box <span class="hljs-title">box1</span><span class="hljs-params">(<span class="hljs-number">12</span>,<span class="hljs-number">15</span>,<span class="hljs-number">18</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> box1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Box box2;<br>    box2 = <span class="hljs-built_in">fun</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>fun</code>函数返回时，系统生成<code>box1</code>的副本，是一个<code>临时无名对象</code>，完成给<code>box2</code>的赋值之后即刻消亡。</p><h4 id="为什么要使用常引用的参数？"><a href="#为什么要使用常引用的参数？" class="headerlink" title="为什么要使用常引用的参数？"></a>为什么要使用常引用的参数？</h4><ol><li><p>使用<code>引用</code>作为形参的好处：</p><p>不会调用拷贝构造函数创建<code>局部变量</code>，相应的，也不用在函数调用结束时去调用析构函数来消亡这个<code>局部变量</code>，节省了函数调用的时间，提高了运行效率。</p></li><li><p>添加<code>const</code>，使用<code>常引用</code>的好处：</p><p>防止函数中对实参进行修改。</p></li></ol></li></ol><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">~<span class="hljs-built_in">rectangle</span>()&#123;&#125;<br></code></pre></td></tr></table></figure><p>这是一个<code>析构函数</code>，并且，如果用户没有自定义析构函数，那么系统会添加<code>缺省的析构函数</code>，也就是这个样子——<strong>函数体中没有任何代码</strong>。</p><ol><li><code>析构函数</code>的名称和<code>构造函数</code>类似，也是与<strong>类名一致</strong>，区别是前面加上了一个表示取反的<code>~</code>，用来表示其与<code>构造函数</code>相反的作用——实现<code>对象的撤销</code>。</li><li><code>析构函数</code>没有函数类型，<code>void</code>也不行，因此也<strong>没有返回值</strong>。</li><li><code>析构函数</code>不能有任何参数，因此，它也不能<code>重载(reload)</code>，一个类只能有一个<code>析构函数</code>；但是，后续<code>类的继承</code>中，它可以被<code>覆盖(override)</code>。</li><li>执行完<code>析构函数</code>，并不意味着对象已经消亡，<code>析构函数</code>的作用是对需要撤销的对象进行清理，以防止出现<code>资源泄漏</code>的问题。而对于对象所占的空间的撤销，并不是由<code>析构函数</code>来完成的。(由<code>delete</code>清除<code>new</code>运算符定义的对象时，先调用<code>析构函数</code>，然后再收回分配的内存。)</li><li>如果类中的数据成员为<code>指针</code>，且关联<code>动态分配</code>的空间时，<strong>必须</strong>手工添加<code>析构函数</code>。</li></ol><h3 id="什么时候调用析构函数"><a href="#什么时候调用析构函数" class="headerlink" title="什么时候调用析构函数"></a>什么时候调用析构函数</h3><ol><li><code>delete</code>运算符导致析构函数调用。</li><li>编译器产生的<code>临时对象</code>不再需要时。</li><li>程序运行结束时。</li></ol><p>简言之就是：一个对象消亡时（<code>生命周期</code>结束），会调用<code>析构函数</code>。</p><h2 id="赋值运算符的重载函数"><a href="#赋值运算符的重载函数" class="headerlink" title="赋值运算符的重载函数"></a>赋值运算符的重载函数</h2><p>在类定义时，系统会给出四个缺省的函数。它们是<code>无参构造函数</code>，<code>拷贝构造函数</code>，<code>析构函数</code>。而剩下的一个，就是<code>赋值运算符的重载函数</code>。</p><p>缺省的赋值运算符重载函数形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">类名&amp; <span class="hljs-keyword">operator</span>= (<span class="hljs-type">const</span> 类名&amp; right)&#123;<br>    (*<span class="hljs-keyword">this</span>).成员=right.成员;<br>    ...<br>    <span class="hljs-keyword">return</span>  *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现的是成员的简单对拷，属于<code>浅拷贝</code>。</p><p>那么前面也说过，最好是实现<code>深拷贝</code>，所以需要手写赋值运算符的重载函数。</p><h1 id="本篇结束"><a href="#本篇结束" class="headerlink" title="本篇结束"></a>本篇结束</h1><p>简单总结了一下类的构成，本篇代码均在Typora中手打，没有经过编译器的语法检查，可能存在谬误。如有发现请指出。</p>]]></content>
    
    
    <categories>
      
      <category>C++整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>面向对象编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
