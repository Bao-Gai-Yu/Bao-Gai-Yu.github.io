<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cpp_复习整理_1</title>
    <link href="/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/"/>
    <url>/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/</url>
    
    <content type="html"><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><hr><p>大一终于结束了，经过了一年的C++学习，是时候对所学知识进行整理与总结了。</p><p>其实老早就可以总结了，但是我懒癌，并且这个博客前天才刚建好，故这个系列只对大一下所学的“面向对象编程”部分进行整理与总结。</p><img src="/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/default.png" class=""><hr><h1 id="面向过程编程-VS-面向对象编程"><a href="#面向过程编程-VS-面向对象编程" class="headerlink" title="面向过程编程 VS 面向对象编程"></a>面向过程编程 VS 面向对象编程</h1><p>首先何谓面向过程编程，何谓面向对象编程？</p><h2 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h2><p>是一种传统的设计方法，围绕着功能进行编程。</p><p><strong><center>程序=数据结构+算法</center></strong></p><img src="/2022/07/14/Cpp-%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86-1/1.png" class="" title="程序&#x3D;数据结构+算法"><p>并且往往具有以下的特征</p><ul><li>用一个函数实现一个功能</li><li>所有的数据都是公用的</li><li>一个函数可使用任何一组数据</li><li>一组数据可被多个函数使用</li></ul><p>但是这样结构化的程序设计，在程序规模增大的过程中，渐渐显示出不足。</p><p>软件业的目标是更快、更正确、更经济地建立软件。其中，就需要实现两个目标：</p><ol><li>如何更高效的实现函数的复用？</li><li>如何更清晰的实现变量和函数的关系？使得程序更清晰更易于修改和维护。</li></ol><p>而结构化程序设计中，程序的大量函数、变量之间的关系错综复杂，要抽取部分代码来实现复用，会变得十分困难。</p><p>因此，面向对象的程序设计方法，应运而生。</p><p><strong><center>面向对象的程序=类+类+类+类+…+类</center></strong></p><p>而设计程序的过程，就是设计类的过程。</p><p>是围绕着现实世界的实体（对象）进行设计；程序设计者从“设计函数功能”转向“设计类和对象”，即如何用属性和行为来描述一个实体，如何向实体发送消息以调度实体的行为。这是一种以认识世界的方法为参考的程序设计方法，更为自然，有利于大型程序的组织和实现。</p><hr><h1 id="类与对象的实现"><a href="#类与对象的实现" class="headerlink" title="类与对象的实现"></a>类与对象的实现</h1><h2 id="如何声明一个类"><a href="#如何声明一个类" class="headerlink" title="如何声明一个类"></a>如何声明一个类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">rectangle</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>)&#123;<br>        len=l;<br>        wid=w;<br>    &#125;<br>    ~<span class="hljs-built_in">rectangle</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> w)</span></span>&#123;<br>        len=l;<br>        wid=w;<br>    &#125;<br>   <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> len*wid;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">perimeter</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*(len+wid);<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> len;<br>    <span class="hljs-type">double</span> wid;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如上，我们声明了一个矩形类，其中包含了public的成员函数：<code>构造函数</code>，<code>析构函数</code>，<code>设置长宽函数setData</code>,<code>面积函数area</code>，以及<code>周长函数perimeter</code>，以及private的数据成员：<code>len</code>，<code>wid</code>。</p><ul><li>类中可以设置<code>变量</code>作为数据成员，也可以设置<code>函数</code>作为成员函数。</li><li>类中的成员可以设置<code>成员访问限定符</code>，即<code>public</code>，<code>protected</code>，<code>private</code>。如果一个成员的上方没有成员访问限定符，则默认为<code>private</code>。</li></ul><h2 id="怎样使用一个类和对象"><a href="#怎样使用一个类和对象" class="headerlink" title="怎样使用一个类和对象"></a>怎样使用一个类和对象</h2><h3 id="定义一个对象"><a href="#定义一个对象" class="headerlink" title="定义一个对象"></a>定义一个对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Rectangle rec1;<br><span class="hljs-function">Rectangle <span class="hljs-title">rec2</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>如此，便定义了<code>rec1</code>和<code>rec2</code>这两个对象。其中<code>rec1</code>使用的是构造函数的默认参数，一个长一宽一的矩形，而<code>rec2</code>是一个长二宽二的矩形。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol><li>构造函数是每一个类都<strong>必须会有</strong>的函数。</li><li>构造函数是一种特殊的成员函数，<strong>无需用户调用</strong>，在定义新对象时由程序自动调用执行。</li><li>它的名称和<strong>类名一致</strong>，且<strong>没有函数类型</strong>，<code>void</code>也不行；因此，构造函数也<strong>没有返回值</strong>。</li><li>构造函数可以<code>重载</code>。</li><li>构造函数的分类<ul><li>无参构造函数</li><li>含参、带默认值的构造函数</li><li>复制构造函数（拷贝构造函数）</li></ul></li></ol><h3 id="无参构造函数"><a href="#无参构造函数" class="headerlink" title="无参构造函数"></a>无参构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>()&#123;&#125;<br></code></pre></td></tr></table></figure><p>如此，便是一个最简单的构造函数，它没有任何参数，也没有任何实质性的作用。</p><ul><li><p><strong>重要</strong>：如果用户没有自定义<strong>任何</strong>类型的构造函数,则编译器会提供<strong>缺省的无参构造函数</strong>，即上方的构造函数,没有任何形式的参数，并且函数体为空。</p><p>tips：即使用户定义的是<code>含参的构造函数</code>或是<code>拷贝构造函数</code>，该缺省的无参构造函数也不会提供。</p></li></ul><h3 id="含参构造函数"><a href="#含参构造函数" class="headerlink" title="含参构造函数"></a>含参构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>)&#123;len=l;wid=w;&#125;<br></code></pre></td></tr></table></figure><p>这是一个带有两个参数，且其中一个带有默认值的<code>双参构造函数</code>。</p><p>在定义对象时，在对象名后紧跟实参来调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">rectangle <span class="hljs-title">rec1</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)</span></span>;<br><span class="hljs-function">rectangle <span class="hljs-title">rec2</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//第二个参数使用的是默认参数</span><br></code></pre></td></tr></table></figure><h4 id="单参构造函数的特殊用法"><a href="#单参构造函数的特殊用法" class="headerlink" title="单参构造函数的特殊用法"></a>单参构造函数的特殊用法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l)&#123;...&#125;<br><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-type">double</span> l,<span class="hljs-type">double</span> w=<span class="hljs-number">1</span>)&#123;...&#125;<br></code></pre></td></tr></table></figure><p>​        <strong>注意：</strong>这两种写法写在一起会产生<code>二义性错误</code>，此处暂不深入讨论。</p><p>这两个构造函数的共同特点是：        有且只有一个<code>无默认值</code>的形参</p><p>在某些特定的情况下可以起到<strong>类型转换</strong>的作用。</p><p>比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">rectangle rec1=<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>此处等号右侧，<code>int</code>整数首先通过单参构造函数，生成一个<code>临时的无名对象</code>，再通过<code>拷贝构造函数</code>来构造<code>rec1</code>。并且构造完成之后，这个<code>临时无名对象</code>即刻被<code>析构</code>。</p><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2>]]></content>
    
    
    <categories>
      
      <category>C++整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>面向对象编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
